@page "/Tickets/All"

@inject Response.Data.ApplicationDbContext DbContext;
@inject i_TicketService TicketService;

@using Response.Data;
@using Microsoft.EntityFrameworkCore;

<PageTitle>All Tickets</PageTitle>

@if (checkNull())
{
       <MudProgressCircular Color="Color.Info" Indeterminate="false" />
}
else
{    
    /*
    <MudTable Items="@_tickets" Dense="true" Hover="true" MultiSelection="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">All Tickets</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Ticket ID</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Owner</MudTh>
            <MudTh>Department</MudTh>
            <MudTh>Company</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Created By</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Ticket, object>(x=>x.CreatedAt)">Created</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Ticket, object>(x=>x.UpdatedAt)">Updated</MudTableSortLabel></MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Ticket ID">@context.Id</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Owner">@context.OwnerId</MudTd>
            <MudTd DataLabel="Department">@(_departments.FirstOrDefault(d => d.Id == context.DepartmentId).Name)</MudTd>
            <MudTd DataLabel="Company">@(_companies.FirstOrDefault(c => c.Id == context.CompanyId).Name) </MudTd>
            <MudTd DataLabel="Status">@(_status.FirstOrDefault(s => s.Id == context.StatusId).Name)</MudTd>
            <MudTd DataLabel="Created By">@context.CreatorId</MudTd>
        </RowTemplate>
        <PagerContent>
             <MudTablePager />
        </PagerContent>
    </MudTable>
    */ 
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudIconButton Icon="@Icons.Material.Filled.AccessAlarm"></MudIconButton>
        <MudToggleIconButton @bind-Toggled="_dense" Icon="@Icons.Material.Filled.DensityLarge" Color="@Color.Error"
                         ToggledIcon="@Icons.Material.Filled.DensitySmall" ToggledColor="@Color.Success" />
        <MudButton StartIcon="@Icons.Material.Filled.AlarmAdd" IconColor="Color.Warning">Add alarm</MudButton>
    </MudButtonGroup>
    
    <MudDataGrid    Items="@_tickets" 
                    Dense="@_dense" 
                    SortMode="SortMode.Multiple" 
                    Hover="true" 
                    MultiSelection="true" 
                    Filterable="true" 
                    ShowFilterIcons="false"
                    FilterMode="DataGridFilterMode.Simple" 
                    FilterCaseSensitivity="DataGridFilterCaseSensitivity.Default">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Ticket ID" />
            <PropertyColumn Property="x => x.Title" Title="Title" />
            <PropertyColumn Property="x => x.OwnerId" Title="Owner" />
            <PropertyColumn Property="x => _departments.FirstOrDefault(d => d.Id == x.DepartmentId).Name" Title="Department" />
            <PropertyColumn Property="x => _companies.FirstOrDefault(c => c.Id == x.CompanyId).Name" Title="Company" />
            <PropertyColumn Property="x => _status.FirstOrDefault(s => s.Id == x.StatusId).Name" Title="Status"/>
            <PropertyColumn Property="x => x.CreatorId" Title="Created By" />
        </Columns>
    </MudDataGrid>

}

@code {
    private bool _dense = true;
    private string searchString1 = "";

    private IEnumerable<Ticket>? _tickets;
    private IEnumerable<Company>? _companies;
    private IEnumerable<Department>? _departments;
    private IEnumerable<Status>? _status;
    
    public bool checkNull() =>  _tickets == null || !_tickets.Any();

    protected override async Task OnInitializedAsync()
    {
        _tickets = await TicketService.GetAllTicketsAsync();
        _companies = await TicketService.GetAllCompaniesAsync();
        _departments = await TicketService.GetAllDepartmentsAsync();
        _status = await TicketService.GetAllStatusesAsync();
    }

    private bool FilterFunc(Ticket ticket)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
            return true;

        return ticket.Title.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ||
               ticket.Description.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ||
               ticket.DepartmentId.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase) ||
               ticket.CompanyId.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase) ||
               ticket.StatusId.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase) ||
               ticket.CreatorId.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase);
    }
}